import asyncio
import contextlib
import json
import logging
import random
import re
import time
from collections import defaultdict
from functools import partial

import aiohttp
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.filters import Command
from aiogram.types import BotCommand
from aiohttp import ClientTimeout

from config import settings

logging.basicConfig(level=logging.INFO)
router = Router()
pending_users = set()
last_typing_times = defaultdict(lambda: 0)
TYPING_INTERVAL = 4

# –ì–ª–æ–±–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ—Ä–∞–∑—ã –∏–∑ JSON
PHRASES = {
    "thinking": ["–ü–µ—á–∞—Ç–∞—é –æ—Ç–≤–µ—Ç..."],
    "fallback": ["–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."]
}


def load_phrases(path: str = "phrases.json"):
    global PHRASES
    try:
        with open(path, "r", encoding="utf-8") as f:
            PHRASES = json.load(f)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ—Ä–∞–∑—ã –∏–∑ {path}: {e}")


def random_phrase(category: str) -> str:
    return random.choice(PHRASES.get(category, ["..."]))


async def get_backend_response(payload: dict, session: aiohttp.ClientSession) -> str:
    try:
        async with session.post(settings.backend_api_url, json=payload) as response:
            if response.status == 200:
                data = await response.json()
                return data.get("response", random_phrase("fallback"))
            else:
                return f"–û—à–∏–±–∫–∞ API: {response.status}"
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ backend:")
        return random_phrase("fallback")


async def start_handler(message: types.Message):
    await message.answer(
        """–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –ú–µ–Ω–æ–Ω! –Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–æ–≥–æ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞!
–ú–æ–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ø—Ä–æ—Å–∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –≤–∞–º —Å–ª–µ–¥—É—é—â–µ–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º –≤—ã –Ω–∞—á–Ω—ë—Ç–µ –º–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
        
–î–∞–Ω–Ω–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–∞—Å–∞–µ–º—ã—Ö –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–æ–≥–æ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. 
–û–¥–Ω–∞–∫–æ, –æ–Ω–∞ –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–æ—Å–ø—Ä–∏–Ω—è—Ç—ã –∫–∞–∫ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–µ, –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–ª–∏ –Ω–µ–ø–æ–¥–æ–±–∞—é—â–∏–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—è–∑–∞–Ω —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –≤–≤–æ–¥–Ω—ã–µ, —Ç–∞–∫ –∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. 
–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ª—é–±—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è, –≤–æ–∑–Ω–∏–∫—à–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏, –≤–∫–ª—é—á–∞—è, –Ω–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è—Å—å, –º–æ—Ä–∞–ª—å–Ω—ã–π —É—â–µ—Ä–±, –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—é –∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤ —Ç—Ä–µ—Ç—å–∏—Ö –ª–∏—Ü.""")


async def process_backend(message: types.Message, session: aiohttp.ClientSession, msg_to_edit: types.Message, bot: Bot):
    user_id = message.from_user.id
    payload = {"chat_id": message.chat.id, "message": message.text}

    try:
        await bot.send_chat_action(chat_id=message.chat.id, action="typing")
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥ —Å payload: {payload}")
        reply = await get_backend_response(payload, session)
        # await msg_to_edit.edit_text(prepare_for_markdown_v2(reply), parse_mode="MarkdownV2")
        await msg_to_edit.edit_text(reply, parse_mode="Markdown")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await msg_to_edit.edit_text(prepare_for_markdown_v2(random_phrase("fallback")), parse_mode="MarkdownV2")
    finally:
        pending_users.discard(user_id)  # –≤—Å–µ–≥–¥–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º


async def keep_typing(bot: Bot, chat_id: int):
    try:
        while True:
            now = time.time()
            if now - last_typing_times[chat_id] >= TYPING_INTERVAL:
                await bot.send_chat_action(chat_id=chat_id, action="typing")
                last_typing_times[chat_id] = now
            await asyncio.sleep(2)
    except asyncio.CancelledError:
        pass


async def message_handler(message: types.Message, session: aiohttp.ClientSession, bot: Bot):
    user_id = message.from_user.id

    if user_id in pending_users:
        await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å.")
        return

    pending_users.add(user_id)

    thinking_msg = await message.answer(random_phrase("thinking"))

    typing_task = asyncio.create_task(keep_typing(bot, message.chat.id))
    backend_task = asyncio.create_task(process_backend(message, session, thinking_msg, bot))
    try:
        await backend_task
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ message_handler: {e}")
    finally:
        typing_task.cancel()
        with contextlib.suppress(asyncio.CancelledError):
            await typing_task
        pending_users.discard(user_id)


async def clear_history_handler(message: types.Message, session: aiohttp.ClientSession):
    reset_url = settings.backend_api_url.replace("/chat", "/clear_history")
    payload = {"chat_id": message.chat.id}

    try:
        async with session.post(reset_url, json=payload) as response:
            if response.status == 200:
                await message.answer("üßπ–ù–∞—á–Ω—ë–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞, —è –≤—Å—ë –∑–∞–±—ã–ª! üò∂‚Äçüå´Ô∏è")
            else:
                await message.answer(f"–û–π-–æ–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Çüòñ")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏:")
        await message.answer("–û–π-–æ–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–∫–æ—Ä–æ –º–µ–Ω—è –ø–æ—á–∏–Ω—è—Çüòñ")


async def info_handler(message: types.Message):
    await message.answer(
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–µ–Ω–æ–Ω, —è —á–∞—Ç-–±–æ—Ç –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–æ–≥–æ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. "
        "–ú–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ù–ì–£, "
        "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏, –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –∏ –∂–∏–∑–Ω—å—é –≤ –ê–∫–∞–¥–µ–º–≥–æ—Ä–æ–¥–∫–µ.\n\n"
        "–Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–æ–ª—å—à–æ–π —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–∏—Å–∫–∞ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ üìö.\n\n"
        "–ò–Ω–æ–≥–¥–∞ —è –º–æ–≥—É –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–æ—Å–ø—Ä–∏–Ω—è—Ç—ã –∫–∞–∫ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–µ, –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–ª–∏ –Ω–µ–ø–æ–¥–æ–±–∞—é—â–∏–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—è–∑–∞–Ω —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –≤–≤–æ–¥–Ω—ã–µ, —Ç–∞–∫ –∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. "
        "–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ª—é–±—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è, –≤–æ–∑–Ω–∏–∫—à–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏, –≤–∫–ª—é—á–∞—è, –Ω–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è—Å—å, –º–æ—Ä–∞–ª—å–Ω—ã–π —É—â–µ—Ä–±, –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—é –∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤ —Ç—Ä–µ—Ç—å–∏—Ö –ª–∏—Ü."
    )


def escape_markdown_v2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã MarkdownV2 —Å–æ–≥–ª–∞—Å–Ω–æ Telegram Bot API:
    https://core.telegram.org/bots/api#markdownv2-style
    """
    escape_chars = r"_*[]()~`>#+-=|{}.!\\"
    return re.sub(f"([{re.escape(escape_chars)}])", r"\\\1", text)


def convert_double_to_single_stars(text: str) -> str:
    # "**—Ç–µ–∫—Å—Ç**" ‚Üí "*—Ç–µ–∫—Å—Ç*"
    return re.sub(r"\*\*(.*?)\*\*", r"*\1*", text)


def prepare_for_markdown_v2(text: str) -> str:
    return escape_markdown_v2(convert_double_to_single_stars(text))


@router.message(F.sticker)
async def handle_sticker(message: types.Message):
    await message.answer("üß∏ –°—Ç–∏–∫–µ—Ä—ã ‚Äî —ç—Ç–æ –≤–µ—Å–µ–ª–æ, –Ω–æ —è —É–º–µ—é —Ç–æ–ª—å–∫–æ —á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç. –°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è —á—Ç–æ-–Ω–∏–±—É–¥—å —Ç–µ–∫—Å—Ç–æ–º!")


@router.message(F.photo)
async def handle_photo(message: types.Message):
    await message.answer(
        "üì∏ –ö–∞—Ä—Ç–∏–Ω–∫–∏ ‚Äî —ç—Ç–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –ù–æ —è –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º!")


@router.message(F.video)
async def handle_video(message: types.Message):
    await message.answer("üé¨ –í–∏–¥–µ–æ ‚Äî —ç—Ç–æ –∑–¥–æ—Ä–æ–≤–æ, –Ω–æ —è —Ä–∞–∑–±–∏—Ä–∞—é—Å—å —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–∫—Å—Ç–µ. –°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è —á—Ç–æ-–Ω–∏–±—É–¥—å!")


@router.message(F.voice)
async def handle_voice(message: types.Message):
    await message.answer("üé§ –ì–æ–ª–æ—Å —É—Å–ª—ã—à–∞–ª, –Ω–æ –º–Ω–µ –±—ã —Ç–µ–∫—Å—Ç ‚Äî —Ç–∞–∫ —è —Ç–æ—á–Ω–æ –ø–æ–π–º—É –∏ –æ—Ç–≤–µ—á—É!")


@router.message(F.video_note)
async def handle_video_note(message: types.Message):
    await message.answer("üé• –ö—Ä—É–∂–æ—á–∫–∏ –ø—Ä–∏–∫–æ–ª—å–Ω—ã–µ, –Ω–æ —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –∏—Ö –ø–æ–Ω–∏–º–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–º, —Ç–∞–∫ –≤–µ—Å–µ–ª–µ–µ!")


@router.message(F.audio)
async def handle_audio(message: types.Message):
    await message.answer("üéß –ú—É–∑—ã–∫—É –ª—é–±–ª—é, –Ω–æ —è –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫, —Ç–∞–∫ —á—Ç–æ –¥–∞–≤–∞–π—Ç–µ –ø–æ–æ–±—â–∞–µ–º—Å—è —Ç–µ–∫—Å—Ç–æ–º!")


@router.message(F.document)
async def handle_document(message: types.Message):
    await message.answer(
        "üìÑ –§–∞–π–ª—ã ‚Äî —ç—Ç–æ –≤–∞–∂–Ω–æ, –Ω–æ –ø–æ–∫–∞ —á—Ç–æ —è —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º. –°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ!")


@router.message(F.animation)
async def handle_animation(message: types.Message):
    await message.answer("üéûÔ∏è –ì–∏—Ñ–∫–∞ –∑–∞—Å—á–∏—Ç–∞–Ω–∞! –ù–æ —Ç–µ–∫—Å—Ç ‚Äî –º–æ—ë –≤—Å—ë. –ñ–¥—É –≤–æ–ø—Ä–æ—Å–∏–∫ –≤ –≤–∏–¥–µ —Å–ª–æ–≤!")


@router.message(F.contact)
async def handle_contact(message: types.Message):
    await message.answer("üìá –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–∏–ª, –Ω–æ —è –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –±–µ—Å–µ–¥—ã!")


@router.message(F.location)
async def handle_location(message: types.Message):
    await message.answer("üìç –ú–µ—Å—Ç–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª! –ê —è –≤–æ—Ç –≤ –ù–ì–£ –Ω–∞—Ö–æ–∂—É—Å—å, –º–æ–∂–µ—Ç–µ –º–µ–Ω—è —á—Ç–æ-–Ω–∏–±—É–¥—å —Å–ø—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º!")


@router.message(~F.text)
async def handle_unknown(message: types.Message):
    await message.answer(
        "ü§∑ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ —É–º–µ—é –ø–æ–Ω–∏–º–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–ª–æ–≤–∞–º–∏, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!")


async def main():
    load_phrases()

    bot = Bot(token=settings.telegram_bot_token)
    dp = Dispatcher()
    timeout = ClientTimeout(total=100)
    session = aiohttp.ClientSession(timeout=timeout)

    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="clear_history", description="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"),
        BotCommand(command="info", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
        # BotCommand(command="about_us", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö"),
    ])

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    router.message.register(start_handler, Command("start"))
    router.message.register(partial(clear_history_handler, session=session), Command("clear_history"))
    router.message.register(partial(info_handler), Command("info"))
    router.message.register(partial(message_handler, session=session, bot=bot), F.text)

    router.message.register(handle_sticker, F.sticker)
    router.message.register(handle_photo, F.photo)
    router.message.register(handle_video, F.video)
    router.message.register(handle_voice, F.voice)
    router.message.register(handle_video_note, F.video_note)
    router.message.register(handle_audio, F.audio)
    router.message.register(handle_document, F.document)
    router.message.register(handle_animation, F.animation)
    router.message.register(handle_contact, F.contact)
    router.message.register(handle_location, F.location)

    # Fallback: –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ, —á—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç
    router.message.register(handle_unknown, ~F.text)
    dp.include_router(router)

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        await dp.start_polling(bot)
    finally:
        await session.close()


if __name__ == "__main__":
    asyncio.run(main())
